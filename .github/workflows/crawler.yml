# .github/workflows/crawler.yml

name: 'PetMD Scraper Workflow'

on:
  # main 브랜치에 push 이벤트가 발생했을 때 워크플로우를 실행합니다.
  push:
    branches:
      - main
      - master # 혹시 main 대신 master 브랜치를 사용하실 경우를 대비
  # 수동으로 워크플로우를 실행할 수 있도록 workflow_dispatch를 추가합니다.
  workflow_dispatch:

jobs:
  scrape:
    name: 'Run PetMD Scraper'
    # 최신 버전의 Ubuntu 가상 환경에서 작업을 실행합니다.
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소의 코드를 가상 환경으로 체크아웃합니다.
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Node.js 환경을 설정합니다. (프로젝트에 맞는 버전으로 설정)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # package.json에 명시된 버전에 맞게 조절 가능

      # 3. 프로젝트 의존성을 설치합니다.
      - name: Install dependencies
        run: npm install

      # 4. (문제 해결) Playwright 테스트 패키지를 명시적으로 설치합니다.
      - name: Force install Playwright Test package
        run: npm install --save-dev @playwright/test

      # 5. Playwright에 필요한 브라우저를 설치합니다.
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # 6. Playwright 테스트(크롤러)를 실행합니다.
      - name: Run Playwright tests
        run: npx playwright test scripts/crawler.spec.ts

      # 7. (선택사항) 테스트 결과를 아티팩트로 업로드하여 쉽게 확인할 수 있게 합니다.
      - name: Upload test results
        if: always() # 테스트 성공/실패 여부와 관계없이 항상 실행
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7 # 7일간 결과 보관