
import os
from supabase import create_client, Client
from dotenv import load_dotenv

# .env 파일에서 환경 변수 로드
load_dotenv()

def create_joint_analysis_table():
    """
    Supabase DB에 joint_analysis_records 테이블을 생성합니다.
    """
    try:
        # 환경 변수에서 Supabase 접속 정보 가져오기
        # 서비스 키를 사용해야 스키마 변경 등 관리자 권한 작업이 가능
        supabase_url = os.environ.get("SUPABASE_URL")
        supabase_key = os.environ.get("SUPABASE_SERVICE_KEY")

        if not supabase_url or not supabase_key:
            print("오류: SUPABASE_URL 또는 SUPABASE_SERVICE_KEY 환경 변수가 설정되지 않았습니다.")
            print("AI/backend 폴더에 .env 파일을 만들고 변수를 설정해주세요.")
            return

        supabase: Client = create_client(supabase_url, supabase_key)
        print("Supabase 클라이언트 생성 완료.")

        # 테이블 생성 SQL 쿼리
        # IF NOT EXISTS 를 사용하여 스크립트를 여러 번 실행해도 오류가 발생하지 않도록 함
        sql_query = """
        CREATE TABLE IF NOT EXISTS public.joint_analysis_records (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            dog_id BIGINT NOT NULL REFERENCES public.dogs(id) ON DELETE CASCADE,
            created_at TIMESTAMPTZ WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
            is_baseline BOOLEAN NOT NULL DEFAULT false,
            original_video_filename TEXT NOT NULL,
            processed_video_url TEXT NOT NULL,
            analysis_results JSONB,
            notes TEXT,
            CONSTRAINT unique_baseline_per_dog UNIQUE (dog_id, is_baseline) WHERE (is_baseline = true)
        );

        -- 테이블 및 컬럼에 대한 주석 추가
        COMMENT ON TABLE public.joint_analysis_records IS '사용자별 AI 관절 분석 기록';
        COMMENT ON COLUMN public.joint_analysis_records.is_baseline IS '해당 강아지의 첫 분석(기준점)인지 여부';
        COMMENT ON COLUMN public.joint_analysis_records.analysis_results IS 'AI가 추출한 구조화된 분석 데이터 (안정성, 대칭성 등)';
        COMMENT ON CONSTRAINT unique_baseline_per_dog ON public.joint_analysis_records IS '각 강아지별로 is_baseline=true인 레코드는 하나만 존재하도록 보장';

        -- RLS (Row Level Security) 활성화
        ALTER TABLE public.joint_analysis_records ENABLE ROW LEVEL SECURITY;

        -- 기존 정책이 있다면 삭제 후 재생성 (멱등성 보장)
        DROP POLICY IF EXISTS "사용자는 자신의 분석 기록만 접근 가능" ON public.joint_analysis_records;
        DROP POLICY IF EXISTS "서비스 역할은 모든 접근 가능" ON public.joint_analysis_records;

        -- RLS 정책 생성
        CREATE POLICY "사용자는 자신의 분석 기록만 접근 가능"
        ON public.joint_analysis_records
        FOR ALL
        USING (auth.uid() = user_id);

        CREATE POLICY "서비스 역할은 모든 접근 가능"
        ON public.joint_analysis_records
        FOR ALL
        USING (true)
        WITH CHECK (true);
        """

        print("테이블 생성 및 RLS 정책 설정 쿼리 실행 중...")
        # rpc를 사용하여 SQL 함수를 직접 호출하듯이 쿼리 실행
        response = supabase.rpc('exec', {'sql': sql_query}).execute()

        print("쿼리 실행 완료.")
        
        # 응답 결과 확인
        if response.data:
            print("RPC 응답 데이터:", response.data)
        if hasattr(response, 'error') and response.error:
             print("오류 발생:", response.error)
        else:
            print("✅ 'joint_analysis_records' 테이블이 성공적으로 생성 또는 확인되었습니다.")

    except Exception as e:
        print(f"스크립트 실행 중 예외 발생: {e}")

if __name__ == "__main__":
    create_joint_analysis_table()
